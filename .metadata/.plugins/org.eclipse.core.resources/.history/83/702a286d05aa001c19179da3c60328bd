package com.taller1.demo;

import com.taller1.demo.model.prod.Location;
import com.taller1.demo.model.prod.Product;
import com.taller1.demo.model.prod.Productcategory;
import com.taller1.demo.model.prod.Productsubcategory;
import com.taller1.demo.repositories.ProductRepository;
import com.taller1.demo.services.ProductService;
import com.taller1.demo.services.ProductServiceImp;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class ProductTest {

    @Mock
    private ProductRepository productRepository;
    
    @InjectMocks
    private ProductServiceImp ps;
    
    private Product product0;
    private Optional<Product> product0Op;
    
    private Product product1;
    
    @BeforeEach
	void setUp1() {
		MockitoAnnotations.openMocks(this);
		
		Productcategory pCategory = new Productcategory();
		Productsubcategory pSubCategory = new Productsubcategory();
		pSubCategory.setProductcategory(pCategory);
		product0 = new Product();
		product0.setProductsubcategory(pSubCategory);
		product0.setProductnumber("1");
		product0.setSellstartdate(Timestamp.valueOf("2022-03-12 10:30:04"));
		product0.setSellenddate(Timestamp.valueOf("2022-03-13 10:30:04")); //
		product0.setWeight(BigDecimal.valueOf(12));
		product0.setSize("Big");
	}

	@Test
	void testThatSaveAnProduct() {
		when(productRepository.save(product0)).thenReturn(product0);
		assertNotNull(ps.saveProduct(product0));
	}
	
	@Test
	void testConstraints() {
		when(productRepository.save(product0)).thenReturn(product0);
		Product testLoc = ps.saveProduct(product0);
		assertTrue(testLoc.getName().length() >= 5, "ConstraintName");
		assertTrue(testLoc.getAvailability().intValue() >= 1 && testLoc.getAvailability().intValue() <= 10, "ConstraintAvailability");
		assertTrue(testLoc.getCostrate().intValue() == 0 || testLoc.getCostrate().intValue() == 1, "ConstraintCostRate");
	}
}
