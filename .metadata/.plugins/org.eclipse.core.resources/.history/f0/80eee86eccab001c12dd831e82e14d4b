package com.taller1.demo.services;

import java.sql.Timestamp;
import java.util.Date;
import java.util.Optional;

import com.taller1.demo.model.prod.Productcosthistory;
import com.taller1.demo.repositories.ProductcosthistoryRepository;

public class ProductcosthistoryServiceImp implements ProductcosthistoryService {

	private ProductcosthistoryRepository pchRepository;
	
	public ProductcosthistoryServiceImp(ProductcosthistoryRepository pchRepository) {
		this.pchRepository = pchRepository;
	}

	@Override
	public Productcosthistory saveProductcosthistory(Productcosthistory pch) {
		return pchRepository.save(pch);
	}

	@Override
	public Productcosthistory editProductcosthistory(Productcosthistory pch, Integer id) {
		Optional<Productcosthistory> op = pchRepository.findById(id);
		Productcosthistory oppch = op.get();
		if (pch.getProduct() == null)
			throw new IllegalArgumentException("Product Not Exist");
		if (pch.getEnddate().compareTo(new Timestamp(System.currentTimeMillis())) < 0)
			throw new IllegalArgumentException("End Date Greater Than Actual");
		if (pch.getStandardcost().intValue() < 0)
			throw new IllegalArgumentException("Standar Cost");
		oppch.setProduct(pch.getProduct());;
		oppch.setEnddate(pch.getEnddate());;
		oppch.setStandardcost(pch.getStandardcost());;
		return pchRepository.save(oppch);
	}

}
