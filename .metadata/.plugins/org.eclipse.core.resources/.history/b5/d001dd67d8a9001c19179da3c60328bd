package com.taller1.demo;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;

import com.taller1.demo.model.prod.Location;
import com.taller1.demo.repositories.LocationRepository;
import com.taller1.demo.services.LocationService;
import com.taller1.demo.services.LocationServiceImp;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class LocationTest {

	@Mock
	private LocationRepository locationRepository;

	@InjectMocks
	private LocationServiceImp ls;

	private Location location;


	@BeforeEach
	void setUp1() {
		MockitoAnnotations.openMocks(this);
		
		location = new Location();
		location.setLocationid(1);
		location.setName("locat");
		location.setAvailability(new BigDecimal(2));
		location.setCostrate(new BigDecimal(1));
	}

	@Test
	void testThatSaveAnProduct() {
		when(locationRepository.save(location)).thenReturn(location);
		assertNotNull(ls.saveLocation(location));
	}
	
	@Test
	void testConstraints() {
		when(locationRepository.save(location)).thenReturn(location);
		Location testLoc = ls.saveLocation(location);
		assertTrue(testLoc.getName().length() >= 5, "ConstraintName");
		assertTrue(testLoc.getAvailability().intValue() >= 1 && testLoc.getAvailability().intValue() <= 10, "ConstraintAvailability");
		assertTrue(testLoc.getCostrate().intValue() == 0 || testLoc.getCostrate().intValue() == 1, "ConstraintCostRate");
	}
	
	
	
}
